// Generated by CoffeeScript 1.7.1
(function() {
  var Challenge, Course, mongoose;

  mongoose = require('mongoose');

  Course = mongoose.model('Course');

  Challenge = mongoose.model('Challenge');

  exports.getCourses = function(req, res) {
    return Course.find({}).exec(function(err, collection) {
      return res.SendIfPossible(collection, err);
    });
  };

  exports.createCourse = function(req, res, next) {
    var courseData;
    courseData = req.body;
    return Course.create(courseData, function(err, course) {
      return res.SendIfPossible(course, err);
    });
  };

  exports.startCourse = function(req, res, next) {
    var courseId;
    courseId = req.params.id;
    return Course.findOne({
      _id: courseId
    }).exec(function(err, course) {
      var startDate;
      if (err != null) {
        return res.SendError(err);
      }
      if (!course.published) {
        return res.SendError('Course is not published');
      }
      if (req.user.courses.any(function(x) {
        return x._id === courseId;
      })) {
        return res.SendError('Course is already started');
      }
      startDate = new Date();
      req.user.courses.push({
        id: courseId,
        startDate: startDate
      });
      return req.user.save(function(err) {
        return res.SendIfPossible(startDate, err);
      });
    });
  };

  exports.setReady = function(req, res, next) {
    return Course.findOne({
      _id: req.params.id
    }).exec(function(err, course) {
      if (err != null) {
        return res.SendError(err);
      }
      course.readyToTest = true;
      return course.save(function(err) {
        return res.SendOkIfPossible(err);
      });
    });
  };

  exports.setNotReady = function(req, res, next) {
    return Course.findOne({
      _id: req.params.id
    }).exec(function(err, course) {
      if (err != null) {
        return res.SendError(err);
      }
      course.readyToTest = false;
      return course.save(function(err) {
        return res.SendOkIfPossible(err);
      });
    });
  };

  exports.publishCourse = function(req, res, next) {
    return Course.findOne({
      _id: req.params.id
    }).exec(function(err, course) {
      if (err != null) {
        return res.SendError(err);
      }
      course.published = true;
      if (course.publishDate == null) {
        course.publishDate = new Date();
      }
      return course.save(function(err) {
        return res.SendOkIfPossible(err);
      });
    });
  };

  exports.unpublishCourse = function(req, res, next) {
    return Course.findOne({
      _id: req.params.id
    }).exec(function(err, course) {
      if (err != null) {
        return res.SendError(err);
      }
      course.published = false;
      return course.save(function(err) {
        return res.SendOkIfPossible(err);
      });
    });
  };

  exports.updateCourse = function(req, res, next) {
    var courseData, id;
    id = req.params.id;
    courseData = req.body;
    return Course.findOne({
      _id: id
    }).exec(function(err, course) {
      if (err != null) {
        return res.SendError(err);
      }
      if (course == null) {
        return res.SendError("Course not found");
      }
      course.title = courseData.title;
      course.localFilePath = courseData.localFilePath;
      course.localFileName = courseData.localFileName;
      course.presentationUrl = courseData.presentationUrl;
      course.description = courseData.description;
      course.tags = courseData.tags;
      course.featured = courseData.featured;
      course.lastUpdate = new Date();
      return course.save(function(err) {
        return res.SendOkIfPossible(err);
      });
    });
  };

  exports.removeCourse = function(req, res, next) {
    var id;
    id = req.params.id;
    return Course.remove({
      _id: id
    }).exec(function(err) {
      if (err != null) {
        return res.SendError(err);
      }
      return Challenge.remove({
        courseId: id
      }).exec(function(err) {
        return res.SendOkIfPossible(err);
      });
    });
  };

}).call(this);

//# sourceMappingURL=coursesController.map
