// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app').controller('CourseDetailsController', function($scope, CachedCourse, CachedRating, $routeParams, IdentityService, NotifierService, $location) {
    var afterFetchRating, args, existingRating, saveRating, savingRating;
    $scope.identity = IdentityService;
    existingRating = null;
    savingRating = null;
    $scope["delete"] = function() {
      return CachedCourse.remove($routeParams.id).then(function() {
        NotifierService.notify("Course removed successfully");
        return $location.path("/");
      }, function(error) {
        return NotifierService.error(error);
      });
    };
    CachedCourse.query().$promise.then(function(collection) {
      return collection.findById($routeParams.id, function(course) {
        return $scope.course = course;
      });
    });
    if (IdentityService.isAuthenticated()) {
      args = {
        objectId: $routeParams.id,
        type: 'course'
      };
      $scope.isReadOnly = true;
      saveRating = function() {
        if (existingRating == null) {
          args.value = $scope.userRate;
          return CachedRating.create(args).then(function(rating) {
            existingRating = rating;
            return console.log("Rating was submitted");
          });
        } else {
          existingRating.value = $scope.userRate;
          return existingRating.$update().then(function(rating) {
            existingRating = rating;
            return console.log("Rating was updated");
          });
        }
      };
      $scope.hoverRating = function(value) {
        clearTimeout(savingRating);
        return $scope.isRatingHovered = true;
      };
      $scope.leaveRating = function() {
        $scope.isRatingHovered = false;
        return savingRating = setTimeout(function() {
          if (!($scope.isRatingHovered || $scope.userRate === $scope.currentRate)) {
            $scope.userRate = $scope.currentRate;
            return saveRating();
          }
        }, 1000);
      };
      afterFetchRating = function() {
        return $scope.isReadOnly = false;
      };
      return CachedRating.findOne(args).then(function(rating) {
        $scope.currentRate = $scope.userRate = rating.value;
        existingRating = rating;
        return console.log("Found existing rating " + rating.value);
      }, function() {
        $scope.currentRate = $scope.userRate = 0;
        return console.log("Existing rating was not found");
      }, function() {
        return afterFetchRating();
      });
    }
  });

}).call(this);

//# sourceMappingURL=CourseDetailsController.map
