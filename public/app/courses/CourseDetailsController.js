// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app').controller('CourseDetailsController', function($scope, CachedCourse, CachedRating, $routeParams, IdentityService, NotifierService, $location, $dialogs, FeedbackMessage) {
    var afterFetchRating, existingRating, ratingArgs, saveRating, savingRating, _ref;
    $scope.identity = IdentityService;
    existingRating = null;
    savingRating = null;
    if ((_ref = IdentityService.currentUser) != null ? _ref.isAdmin() : void 0) {
      $scope["delete"] = function() {
        return CachedCourse.remove($routeParams.id).then(function() {
          NotifierService.notify("Course removed successfully");
          return $location.path("/");
        }, function(error) {
          return NotifierService.error(error);
        });
      };
    }
    CachedCourse.query().$promise.then(function(collection) {
      return collection.findById($routeParams.id, function(course) {
        return $scope.course = course;
      });
    });
    if (IdentityService.isAuthenticated()) {
      ratingArgs = {
        url: $location.url(),
        location: "Course: " + $scope.course.title,
        objectId: $routeParams.id,
        type: 'course'
      };
      $scope.isReadonly = true;
      saveRating = function() {
        if (existingRating == null) {
          ratingArgs.value = $scope.userRate;
          return CachedRating.create(ratingArgs).then(function(rating) {
            return existingRating = rating;
          });
        } else {
          existingRating.value = $scope.userRate;
          return existingRating.$update().then(function(rating) {
            return existingRating = rating;
          });
        }
      };
      $scope.hoverRating = function() {
        clearTimeout(savingRating);
        return $scope.isRatingHovered = true;
      };
      $scope.leaveRating = function() {
        if (!IdentityService.currentUser.isAdmin()) {
          $scope.isRatingHovered = false;
          return savingRating = setTimeout(function() {
            if (!($scope.isRatingHovered || $scope.userRate === $scope.currentRate)) {
              $scope.userRate = $scope.currentRate;
              return saveRating();
            }
          }, 1000);
        }
      };
      afterFetchRating = function() {
        return $scope.isReadonly = false;
      };
      $scope.openFeedbackModal = function() {
        return $dialogs.create('/partials/bootstrap/modal/feedbackModal', 'FeedbackModalController', {}, {
          key: false,
          back: 'static'
        }).result.then(function(feedback) {
          var messageData, newFeedback;
          messageData = {
            url: $location.url(),
            location: "Course: " + $scope.course.title,
            text: feedback
          };
          newFeedback = new FeedbackMessage(messageData);
          return newFeedback.$save().then(function() {
            return NotifierService.notify("Message submitted successfully");
          }, NotifierService.error);
        });
      };
      return CachedRating.findOne(ratingArgs).then(function(rating) {
        $scope.currentRate = $scope.userRate = rating.value;
        existingRating = rating;
        return afterFetchRating();
      }, function() {
        $scope.currentRate = $scope.userRate = 0;
        return afterFetchRating();
      });
    }
  });

}).call(this);

//# sourceMappingURL=CourseDetailsController.map
