// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app').controller('CourseDetailsController', function($scope, $sce, CachedCourse, CachedRating, $routeParams, IdentityService, NotifierService, $location, $dialogs, FeedbackMessage) {
    var courseId, existingRating, savingRating;
    $scope.identity = IdentityService;
    existingRating = null;
    savingRating = null;
    courseId = $routeParams.id;
    $scope.getFileUrl = function() {
      var _ref;
      return "http://" + location.host + "/" + ((_ref = $scope.course) != null ? _ref.localFilePath : void 0);
    };
    $scope.trustSrc = function(src) {
      return $sce.trustAsResourceUrl(src);
    };
    $scope.start = function() {
      return $scope.course.$start({
        id: courseId
      }).then(function(startDate) {
        var user;
        user = $scope.identity.currentUser;
        user.courses.push({
          id: courseId,
          startDate: startDate
        });
        $scope.course.started = true;
        return NotifierService.notify("Course was started");
      }, NotifierService.error);
    };
    $scope.publish = function() {
      return $dialogs.confirm('Confirm', 'Are you sure you want to publish this course?').result.then(function() {
        return $scope.course.$publish({
          id: courseId
        }).then(function() {
          $scope.course.published = true;
          return NotifierService.notify("Course was published");
        }, NotifierService.error);
      });
    };
    $scope.unpublish = function() {
      return $scope.course.$unpublish({
        id: courseId
      }).then(function() {
        $scope.course.published = false;
        return NotifierService.info("Course was unpublished");
      }, NotifierService.error);
    };
    $scope.readyToTest = function(enabled) {
      return $scope.course.$setNotReady({
        id: courseId
      }).then(function() {
        $scope.course.readyToTest = enabled;
        return NotifierService.info("Course 'Ready' flag is " + (enabled ? 'set' : 'unset'));
      }, NotifierService.error);
    };
    $scope.edit = function() {
      return $location.path("/courses/edit/" + courseId);
    };
    $scope["delete"] = function() {
      return $dialogs.danger('Confirm', 'Are you sure you want to remove this course entirely?').result.then(function() {
        return CachedCourse.remove(courseId).then(function() {
          NotifierService.notify("Course removed successfully");
          return $location.path("/");
        }, NotifierService.error);
      });
    };
    $scope.openVideo = function() {
      $dialogs.create('/partials/bootstrap/modal/videoModal', 'VideoModalController', {}, {
        url: "https://docs.google.com/a/pjwstk.edu.pl/file/d/0BwxxWo9sXY9LalNTSFB2c01SUEE/preview",
        key: false,
        back: 'static'
      });
      return setTimeout(function() {
        return $('#video').attr('src', $scope.course.videoUrl);
      }, 1000);
    };
    $scope.openFeedbackModal = function() {
      return $dialogs.create('/partials/bootstrap/modal/feedbackModal', 'FeedbackModalController', {}, {
        key: false,
        back: 'static'
      }).result.then(function(feedback) {
        var messageData, newFeedback;
        messageData = {
          url: $location.url(),
          location: "Course: " + $scope.course.title,
          text: feedback
        };
        newFeedback = new FeedbackMessage(messageData);
        return newFeedback.$save().then(function() {
          return NotifierService.notify("Message submitted successfully");
        }, NotifierService.error);
      });
    };
    return CachedCourse.query().$promise.then(function(collection) {
      return collection.findById(courseId, function(course) {
        var afterFetchRating, ratingArgs, saveRating, _ref;
        $scope.course = course;
        if (IdentityService.isAuthenticated()) {
          if ((_ref = $scope.identity.currentUser) != null ? _ref.courses.any(function(x) {
            return x.id === courseId;
          }) : void 0) {
            course.started = true;
          }
          ratingArgs = {
            url: $location.url(),
            location: "Course: " + $scope.course.title,
            objectId: courseId,
            type: 'course'
          };
          $scope.isReadonly = true;
          saveRating = function() {
            if (existingRating == null) {
              ratingArgs.value = $scope.userRate;
              return CachedRating.create(ratingArgs).then(function(rating) {
                return existingRating = rating;
              });
            } else {
              existingRating.value = $scope.userRate;
              return existingRating.$update().then(function(rating) {
                return existingRating = rating;
              });
            }
          };
          $scope.hoverRating = function() {
            clearTimeout(savingRating);
            return $scope.isRatingHovered = true;
          };
          $scope.leaveRating = function() {
            if (!IdentityService.currentUser.isAdmin()) {
              $scope.isRatingHovered = false;
              return savingRating = setTimeout(function() {
                if (!($scope.isRatingHovered || $scope.userRate === $scope.currentRate)) {
                  $scope.userRate = $scope.currentRate;
                  return saveRating();
                }
              }, 1000);
            }
          };
          afterFetchRating = function() {
            return $scope.isReadonly = false;
          };
          return CachedRating.findOne(ratingArgs).then(function(rating) {
            $scope.currentRate = $scope.userRate = rating.value;
            existingRating = rating;
            return afterFetchRating();
          }, function() {
            $scope.currentRate = $scope.userRate = 0;
            return afterFetchRating();
          });
        }
      });
    });
  });

}).call(this);

//# sourceMappingURL=CourseDetailsController.map
