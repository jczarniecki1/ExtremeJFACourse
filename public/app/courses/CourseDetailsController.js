// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app').controller('CourseDetailsController', function($scope, CachedCourse, CachedRating, $routeParams, IdentityService, NotifierService, $location, $dialogs, FeedbackMessage) {
    var existingRating, savingRating;
    $scope.identity = IdentityService;
    existingRating = null;
    savingRating = null;
    $scope.open = function(challengeId) {
      return $location.path("/courses/" + $routeParams.id + "/challenge/" + challengeId);
    };
    $scope.publish = function() {
      return $dialogs.confirm('Confirm', 'Are you sure you want to publish this course?').result.then(function() {
        return $scope.course.$publish({
          id: $routeParams.id
        }).then(function() {
          $scope.course.published = true;
          return NotifierService.notify("Course was published");
        }, NotifierService.error);
      });
    };
    $scope.unpublish = function() {
      return $scope.course.$unpublish({
        id: $routeParams.id
      }).then(function() {
        $scope.course.published = false;
        return NotifierService.info("Course was unpublished");
      }, NotifierService.error);
    };
    $scope.setReadyForTest = function() {
      return $scope.course.$setReady({
        id: $routeParams.id
      }).then(function() {
        $scope.course.readyToTest = true;
        return NotifierService.notify("Course 'Ready' flag is set");
      }, NotifierService.error);
    };
    $scope.unsetReadyForTest = function() {
      return $scope.course.$setNotReady({
        id: $routeParams.id
      }).then(function() {
        $scope.course.readyToTest = false;
        return NotifierService.info("Course 'Ready' flag is unset");
      }, NotifierService.error);
    };
    $scope.edit = function() {
      return $location.path("/courses/edit/" + $routeParams.id);
    };
    $scope["delete"] = function() {
      return $dialogs.danger('Confirm', 'Are you sure you want to remove this course entirely?').result.then(function() {
        return CachedCourse.remove($routeParams.id).then(function() {
          NotifierService.notify("Course removed successfully");
          return $location.path("/");
        }, NotifierService.error);
      });
    };
    return CachedCourse.query().$promise.then(function(collection) {
      return collection.findById($routeParams.id, function(course) {
        var afterFetchRating, ratingArgs, saveRating;
        $scope.course = course;
        if (IdentityService.isAuthenticated()) {
          ratingArgs = {
            url: $location.url(),
            location: "Course: " + $scope.course.title,
            objectId: $routeParams.id,
            type: 'course'
          };
          $scope.isReadonly = true;
          saveRating = function() {
            if (existingRating == null) {
              ratingArgs.value = $scope.userRate;
              return CachedRating.create(ratingArgs).then(function(rating) {
                return existingRating = rating;
              });
            } else {
              existingRating.value = $scope.userRate;
              return existingRating.$update().then(function(rating) {
                return existingRating = rating;
              });
            }
          };
          $scope.hoverRating = function() {
            clearTimeout(savingRating);
            return $scope.isRatingHovered = true;
          };
          $scope.leaveRating = function() {
            if (!IdentityService.currentUser.isAdmin()) {
              $scope.isRatingHovered = false;
              return savingRating = setTimeout(function() {
                if (!($scope.isRatingHovered || $scope.userRate === $scope.currentRate)) {
                  $scope.userRate = $scope.currentRate;
                  return saveRating();
                }
              }, 1000);
            }
          };
          afterFetchRating = function() {
            return $scope.isReadonly = false;
          };
          $scope.openFeedbackModal = function() {
            return $dialogs.create('/partials/bootstrap/modal/feedbackModal', 'FeedbackModalController', {}, {
              key: false,
              back: 'static'
            }).result.then(function(feedback) {
              var messageData, newFeedback;
              messageData = {
                url: $location.url(),
                location: "Course: " + $scope.course.title,
                text: feedback
              };
              newFeedback = new FeedbackMessage(messageData);
              return newFeedback.$save().then(function() {
                return NotifierService.notify("Message submitted successfully");
              }, NotifierService.error);
            });
          };
          return CachedRating.findOne(ratingArgs).then(function(rating) {
            $scope.currentRate = $scope.userRate = rating.value;
            existingRating = rating;
            return afterFetchRating();
          }, function() {
            $scope.currentRate = $scope.userRate = 0;
            return afterFetchRating();
          });
        }
      });
    });
  });

}).call(this);

//# sourceMappingURL=CourseDetailsController.map
