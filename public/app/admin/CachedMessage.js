// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app').factory('CachedMessage', function(MessageModel, $q) {
    var messageList;
    messageList = {};
    return {
      query: function(args) {
        var _name;
        if ((args != null ? args.userId : void 0) != null) {
          args = {
            userId: args.userId
          };
          return messageList[_name = args.userId] != null ? messageList[_name] : messageList[_name] = MessageModel.query(args);
        } else {
          return messageList['all'] != null ? messageList['all'] : messageList['all'] = MessageModel.query();
        }
      },
      answer: function(userId, messageId, answer) {
        var $d;
        $d = $q.defer();
        messageList[userId].$promise.then(function(collection) {
          var message, _i, _len;
          for (_i = 0, _len = collection.length; _i < _len; _i++) {
            message = collection[_i];
            if (message._id === messageId) {
              message.$answer({
                messageId: messageId,
                answer: answer
              }).then(function() {
                return collection.remove(message) && $d.resolve();
              }, function(response) {
                return $d.reject(response.data.reason);
              });
              return;
            }
          }
          return $d.reject("Message not found");
        });
        return $d.promise;
      },
      remove: function(userId, messageId) {
        var $d;
        $d = $q.defer();
        messageList[userId].$promise.then(function(collection) {
          var message, _i, _len;
          for (_i = 0, _len = collection.length; _i < _len; _i++) {
            message = collection[_i];
            if (message._id === messageId) {
              message.$remove({
                messageId: messageId
              }).then(function() {
                return collection.remove(message) && $d.resolve();
              }, function(response) {
                return $d.reject(response.data.reason);
              });
              return;
            }
          }
          return $d.reject("Message not found");
        });
        return $d.promise;
      }
    };
  });

}).call(this);

//# sourceMappingURL=CachedMessage.map
