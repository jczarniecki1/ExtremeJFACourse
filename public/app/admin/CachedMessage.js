// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app').factory('CachedMessage', function(MessageModel, $q) {
    var CachedMessage, messageList;
    messageList = {};
    CachedMessage = (function() {
      function CachedMessage() {}

      CachedMessage.prototype.query = function(args) {
        var _name;
        if ((args != null ? args.userId : void 0) != null) {
          args = {
            userId: args.userId
          };
          return messageList[_name = args.userId] != null ? messageList[_name] : messageList[_name] = MessageModel.query(args);
        } else {
          return messageList['all'] != null ? messageList['all'] : messageList['all'] = MessageModel.query();
        }
      };

      CachedMessage.prototype.answer = function(userId, messageId, answer) {
        var $d;
        $d = $q.defer();
        messageList[userId].$promise.then(function(collection) {
          return collection.findById(messageId, function(message) {
            return message.$answer({
              messageId: messageId,
              answer: answer
            }).then(function() {
              return collection.remove(message) && $d.resolve();
            }, function(response) {
              return $d.reject(response.data.reason);
            });
          }, function() {
            return $d.reject("Message not found");
          });
        });
        return $d.promise;
      };

      CachedMessage.prototype.remove = function(userId, messageId) {
        var $d;
        $d = $q.defer();
        messageList[userId].$promise.then(function(collection) {
          return collection.findById(messageId, function(message) {
            return message.$remove({
              id: messageId
            }).then(function() {
              return collection.remove(message) && $d.resolve();
            }, function(response) {
              return $d.reject(response.data.reason);
            });
          }, function() {
            return $d.reject("Message not found");
          });
        });
        return $d.promise;
      };

      return CachedMessage;

    })();
    return new CachedMessage();
  });

}).call(this);

//# sourceMappingURL=CachedMessage.map
